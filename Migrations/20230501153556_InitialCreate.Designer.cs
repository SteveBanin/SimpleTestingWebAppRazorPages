// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingWebAppRazorPages.Data;

#nullable disable

namespace TestingWebAppRazorPages.Migrations
{
    [DbContext(typeof(TestingWebAppRazorPagesContext))]
    [Migration("20230501153556_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieProducer", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("ProducersId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "ProducersId");

                    b.HasIndex("ProducersId");

                    b.ToTable("MovieProducer");
                });

            modelBuilder.Entity("TestingWebAppRazorPages.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MovieCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("MovieDuration")
                        .HasColumnType("time");

                    b.Property<DateTime>("MovieRelaesedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("TestingWebAppRazorPages.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producer");
                });

            modelBuilder.Entity("TestingWebAppRazorPages.Models.ProducerAddress", b =>
                {
                    b.Property<int>("ProducerAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducerAddressId"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("ProducerAddressId");

                    b.HasIndex("ProducerId")
                        .IsUnique()
                        .HasFilter("[ProducerId] IS NOT NULL");

                    b.ToTable("ProducerAddress");
                });

            modelBuilder.Entity("MovieProducer", b =>
                {
                    b.HasOne("TestingWebAppRazorPages.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingWebAppRazorPages.Models.Producer", null)
                        .WithMany()
                        .HasForeignKey("ProducersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestingWebAppRazorPages.Models.ProducerAddress", b =>
                {
                    b.HasOne("TestingWebAppRazorPages.Models.Producer", "Producers")
                        .WithOne("Adress")
                        .HasForeignKey("TestingWebAppRazorPages.Models.ProducerAddress", "ProducerId");

                    b.Navigation("Producers");
                });

            modelBuilder.Entity("TestingWebAppRazorPages.Models.Producer", b =>
                {
                    b.Navigation("Adress");
                });
#pragma warning restore 612, 618
        }
    }
}
